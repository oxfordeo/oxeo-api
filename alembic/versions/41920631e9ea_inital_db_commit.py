"""Inital db commit

Revision ID: 41920631e9ea
Revises:
Create Date: 2022-06-14 16:11:13.401667

"""
import geoalchemy2
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

from alembic import op

# revision identifiers, used by Alembic.
revision = "41920631e9ea"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "aois",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="MULTIPOLYGON",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column(
            "labels",
            postgresql.ARRAY(
                postgresql.ENUM(
                    "waterbody",
                    "agricultural_area",
                    "basin",
                    "admin_area",
                    name="AOILabel",
                )
            ),
            nullable=True,
        ),
        sa.Column("properties", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    # op.create_index('idx_aois_geometry', 'aois',
    #    ['geometry'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_index(op.f("ix_aois_id"), "aois", ["id"], unique=False)
    op.create_index(op.f("ix_aois_labels"), "aois", ["labels"], unique=False)
    op.create_table(
        "assets",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "geometry",
            geoalchemy2.types.Geometry(
                geometry_type="POINT",
                srid=4326,
                from_text="ST_GeomFromEWKT",
                name="geometry",
            ),
            nullable=True,
        ),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column(
            "labels",
            postgresql.ARRAY(
                postgresql.ENUM("mine", "power_station", name="AssetLabel")
            ),
            nullable=True,
        ),
        sa.Column("properties", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    # op.create_index('idx_assets_geometry', 'assets',
    #      ['geometry'], unique=False, postgresql_using='gist', postgresql_ops={})
    op.create_index(op.f("ix_assets_id"), "assets", ["id"], unique=False)
    op.create_index(op.f("ix_assets_labels"), "assets", ["labels"], unique=False)
    op.create_table(
        "companies",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("name", sa.String(), nullable=True),
        sa.Column("properties", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint("name"),
    )
    op.create_index(op.f("ix_companies_id"), "companies", ["id"], unique=False)
    op.create_table(
        "users",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column("email", sa.String(), nullable=True),
        sa.Column("hashed_password", sa.String(), nullable=True),
        sa.Column("is_active", sa.Boolean(), nullable=True),
        sa.Column("role", postgresql.ENUM("user", "admin", name="role"), nullable=True),
        sa.Column("data", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_id"), "users", ["id"], unique=False)
    op.create_table(
        "assets_companies_link",
        sa.Column("company_id", sa.Integer(), nullable=False, back_populates="assets"),
        sa.Column("asset_id", sa.Integer(), nullable=False, back_populates="companies"),
        sa.Column("equity", sa.Integer(), nullable=True),
        sa.Column("properties", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["asset_id"],
            ["assets.id"],
        ),
        sa.ForeignKeyConstraint(
            ["company_id"],
            ["companies.id"],
        ),
        sa.PrimaryKeyConstraint("company_id", "asset_id"),
    )
    op.create_table(
        "events",
        sa.Column("id", sa.Integer(), nullable=False),
        sa.Column(
            "labels",
            postgresql.ARRAY(
                postgresql.ENUM(
                    "ndvi",
                    "water_extents",
                    "soil_moisture",
                    "prediction",
                    name="EventLabel",
                )
            ),
            nullable=True,
        ),
        sa.Column("aoi_id", sa.Integer(), nullable=True),
        sa.Column("datetime", sa.Date(), nullable=True),
        sa.Column("properties", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(
            ["aoi_id"],
            ["aois.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_events_datetime"), "events", ["datetime"], unique=False)
    op.create_index(op.f("ix_events_id"), "events", ["id"], unique=False)
    op.create_index(op.f("ix_events_labels"), "events", ["labels"], unique=False)
    # op.drop_table('spatial_ref_sys')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # op.create_table('spatial_ref_sys',
    # sa.Column('srid', sa.INTEGER(), autoincrement=False, nullable=False),
    # sa.Column('auth_name',
    #    sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    # sa.Column('auth_srid', sa.INTEGER(), autoincrement=False, nullable=True),
    # sa.Column('srtext',
    #    sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.Column('proj4text',
    #     sa.VARCHAR(length=2048), autoincrement=False, nullable=True),
    # sa.CheckConstraint('(srid > 0) AND (srid <= 998999)',
    #     name='spatial_ref_sys_srid_check'),
    # sa.PrimaryKeyConstraint('srid', name='spatial_ref_sys_pkey')
    # )
    op.drop_index(op.f("ix_events_labels"), table_name="events")
    op.drop_index(op.f("ix_events_id"), table_name="events")
    op.drop_index(op.f("ix_events_datetime"), table_name="events")
    op.drop_table("events")
    op.drop_table("assets_companies_link")
    op.drop_index(op.f("ix_users_id"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    op.drop_index(op.f("ix_companies_id"), table_name="companies")
    op.drop_table("companies")
    op.drop_index(op.f("ix_assets_labels"), table_name="assets")
    op.drop_index(op.f("ix_assets_id"), table_name="assets")
    op.drop_index(
        "idx_assets_geometry",
        table_name="assets",
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.drop_table("assets")
    op.drop_index(op.f("ix_aois_labels"), table_name="aois")
    op.drop_index(op.f("ix_aois_id"), table_name="aois")
    op.drop_index(
        "idx_aois_geometry",
        table_name="aois",
        postgresql_using="gist",
        postgresql_ops={},
    )
    op.drop_table("aois")
    # ### end Alembic commands ###
